# rubocop:disable Metrics/ClassLength
module Dependabot
  class PullRequestCreator
    # MessageBuilder builds PR message for a dependency update
    class MessageBuilder
      attr_reader source: untyped

      attr_reader dependencies: untyped

      attr_reader files: untyped

      attr_reader credentials: untyped

      attr_reader pr_message_header: untyped

      attr_reader pr_message_footer: untyped

      attr_reader commit_message_options: untyped

      attr_reader vulnerabilities_fixed: untyped

      attr_reader github_redirection_service: untyped

      def initialize: (source: untyped source, dependencies: untyped dependencies, files: untyped files, credentials: untyped credentials, github_redirection_service: untyped github_redirection_service, ?pr_message_header: untyped? pr_message_header, ?pr_message_footer: untyped? pr_message_footer, ?commit_message_options: ::Hash[untyped, untyped] commit_message_options, ?vulnerabilities_fixed: ::Hash[untyped, untyped] vulnerabilities_fixed) -> void

      def pr_name: () -> untyped

      def pr_message: () -> untyped

      def commit_message: () -> untyped

      def message: () -> untyped

      private

      def library_pr_name: () -> untyped

      def application_pr_name: () -> untyped

      def pr_name_prefix: () -> untyped

      def commit_subject: () -> untyped

      def commit_message_intro: () -> untyped

      def prefixed_pr_message_footer: () -> ::String

      def suffixed_pr_message_header: () -> ::String

      def message_trailers: () -> (nil | untyped)

      def custom_trailers: () -> (nil | untyped)

      def signoff_trailers: () -> (nil | untyped)

      def signoff_message: () -> (nil | ::String)

      def on_behalf_of_message: () -> (nil | ::String)

      def requirement_commit_message_intro: () -> untyped

      # rubocop:disable Metrics/PerceivedComplexity
      def version_commit_message_intro: () -> untyped

      def multidependency_property_intro: () -> ::String

      def dependency_set_intro: () -> ::String

      def multidependency_intro: () -> ::String

      def from_version_msg: (untyped previous_version) -> ::String

      def updating_a_property?: () -> untyped

      def updating_a_dependency_set?: () -> untyped

      def property_name: () -> untyped

      def dependency_set: () -> untyped

      def dependency_links: () -> untyped

      def metadata_links: () -> untyped

      def metadata_links_for_dep: (untyped dep) -> untyped

      def metadata_cascades: () -> untyped

      def metadata_cascades_for_dep: (untyped dependency) -> untyped

      def changelog_url: (untyped dependency) -> untyped

      def commits_url: (untyped dependency) -> untyped

      def homepage_url: (untyped dependency) -> untyped

      def releases_url: (untyped dependency) -> untyped

      def source_url: (untyped dependency) -> untyped

      def upgrade_url: (untyped dependency) -> untyped

      def metadata_finder: (untyped dependency) -> untyped

      def pr_name_prefixer: () -> untyped

      def previous_version: (untyped dependency) -> untyped

      def new_version: (untyped dependency) -> untyped

      def docker_digest_from_reqs: (untyped requirements) -> untyped

      def previous_ref: (untyped dependency) -> untyped

      def new_ref: (untyped dependency) -> untyped

      def old_library_requirement: (untyped dependency) -> untyped

      def new_library_requirement: (untyped dependency) -> untyped

      def ref_changed?: (untyped dependency) -> untyped

      # TODO: Bring this in line with existing library checks that we do in the
      # update checkers, which are also overriden by passing an explicit
      # `requirements_update_strategy`.
      #
      # TODO re-use in BranchNamer
      def library?: () -> (::TrueClass | untyped)

      def switching_from_ref_to_release?: (untyped dependency) -> (::FalseClass | untyped)

      def package_manager: () -> untyped
    end
  end
end
