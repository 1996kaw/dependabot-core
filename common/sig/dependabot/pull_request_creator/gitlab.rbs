module Dependabot
  class PullRequestCreator
    class Gitlab
      attr_reader source: untyped

      attr_reader branch_name: untyped

      attr_reader base_commit: untyped

      attr_reader credentials: untyped

      attr_reader files: untyped

      attr_reader pr_description: untyped

      attr_reader pr_name: untyped

      attr_reader commit_message: untyped

      attr_reader author_details: untyped

      attr_reader labeler: untyped

      attr_reader approvers: untyped

      attr_reader assignees: untyped

      attr_reader milestone: untyped

      attr_reader target_project_id: untyped

      def initialize: (source: untyped source, branch_name: untyped branch_name, base_commit: untyped base_commit, credentials: untyped credentials, files: untyped files, commit_message: untyped commit_message, pr_description: untyped pr_description, pr_name: untyped pr_name, author_details: untyped author_details, labeler: untyped labeler, approvers: untyped approvers, assignees: untyped assignees, milestone: untyped milestone, target_project_id: untyped target_project_id) -> void

      def create: () -> (nil | untyped)

      private

      def gitlab_client_for_source: () -> untyped

      def branch_exists?: () -> untyped

      def commit_exists?: () -> untyped

      def merge_request_exists?: () -> untyped

      def create_branch: () -> untyped

      # @param [DependencyFile] file
      def file_action: (untyped file) -> untyped

      def create_commit: () -> untyped

      def create_submodule_update_commit: () -> untyped

      def create_merge_request: () -> untyped

      def annotate_merge_request: (untyped merge_request) -> untyped

      def add_approvers_to_merge_request: (untyped merge_request) -> (nil | untyped)

      def approvers_hash: () -> untyped

      def default_branch: () -> untyped
    end
  end
end
